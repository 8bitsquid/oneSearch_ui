angular.module('oneSearch.common')
    /**
     * @ngdoc service
     * @name oneSearch.dataFactory
     *
     * @requires $http
     *
     * @description
     * Factory service to retrieve results for the search box suggestion dropdown generated by {@link oneSearch.directive:suggest-one-search suggest-one-search directive}.
     *
     * @returns {HttpPromise} Returns a promise object with standard $http `then` method.
     */
    .factory('dataFactory', ['$http', function($http) {
        return {
            get: function(url) {
                return $http.get(url).then(function(resp) {
                    return resp.data; // success callback returns this
                });
            }
        };
    }])

    /**
     * @ngdoc directive
     * @name oneSearch.directive:suggest-one-search
     *
     * @requires $timeout
     * @requires $document
     *
     * @scope
     * @restrict AEC
     *
     * @param {string} prompt The `placeholder` text to display in the search text box
     * @param {string} model Name of the `$scope` variable to store the search string
     * @param {string} search Name of the `$scope` reference to the `search()` function defined in the {@link oneSearch.oneSearch:OneSearchCtrl OneSearchCtrl}
     *
     * @description
     * Directive for the search box with suggestion dropdown
     */
    .directive('suggestOneSearch', ['$timeout', '$document', function($timeout, $document) {
        return {
            restrict: 'AEC',
            scope: {
                prompt: '@',
                model: '=',
                search: '='
            },
            controller: function($scope, $window, $timeout, $document,  dataFactory){
                $scope.items = {};
                $scope.filteredItems = [];
                $scope.model = "";
                $scope.current = -1;
                $scope.originalValue = $scope.model;
                $scope.dataRequested = false;
                $scope.numShow = 5;
                $scope.faqSearched = false;

                // hides the list initially
                $scope.selected = false;

                $scope.onChange = function(){
                    //console.log("OnChange event.");
                    $scope.selected = true;
                    var fixedString = $scope.model.replace(/[&\/\\#+()$~%':*?<>{}]/g, ' ').trim();
                    fixedString = fixedString.substring(0, 150);

                    if ($scope.model.length < 3 ||
                        ($scope.model.indexOf($scope.originalValue) < 0 && $scope.model.length >= $scope.originalValue.length) ||
                        ($scope.originalValue.indexOf($scope.model) < 0 && $scope.model.length <= $scope.originalValue.length)){
                        $scope.items = {};
                        $scope.setCurrent(-1, false);
                        $scope.dataRequested = false;
                        $scope.selected = false;
                        $scope.faqSearched = false;
                    }
                    if ($scope.model.length > 2 && !$scope.dataRequested){
/*
                        dataFactory.get('//wwwdev2.lib.ua.edu/oneSearch/api/suggest/' + encodeURI(fixedString))
                            .then(function(data) {
                                $scope.items.suggest = data;
                                $scope.setCurrent(-1, false);
                            });
*/
                        $scope.dataRequested = true;
                    }
                    if ($scope.model.length > 2){
                        $timeout(function() {
                            dataFactory.get('//wwwdev2.lib.ua.edu/oneSearch/api/recommend/' + encodeURI(fixedString))
                                .then(function(data) {
                                    $scope.items.recommend = data;
                                });
                            dataFactory.get('//wwwdev2.lib.ua.edu/staffDir/api/subject/' + encodeURI(fixedString) + '/match/startwith')
                                .then(function(data) {
                                    $scope.items.subjects = data;
                                });
                        }, 0);
                    }
                    if ($scope.model.length > 4 && !$scope.faqSearched){
                        //run GCS only if the last character is a space and prev one is not
                        var lastTwo = fixedString.slice(-2);
                        //console.log("Checking conditions for GCS search..." + lastTwo);
                        if (lastTwo.indexOf(" ") > 0) {
                            //console.log("Running GCS search.");
                            $timeout(function() {
                                $scope.faqSearched = true;
                                dataFactory.get('https://www.googleapis.com/customsearch/v1?key=AIzaSyCMGfdDaSfjqv5zYoS0mTJnOT3e9MURWkU&cx=003453353330912650815:lfyr_-azrxe&q=' +
                                    encodeURI(fixedString) + '&siteSearch=ask.lib.ua.edu')
                                    .then(function (data) {
                                        // pluck out the items array for easier 'suggestWatcher' processing
                                        $scope.items.faq = data.items;
                                    });
                            }, 0);
                        }
                    }
                    $scope.originalValue = $scope.model;
                };
                $scope.go = function ( path ) {
                    $scope.model = "";
                    $scope.originalValue = $scope.model;
                    $window.location.href = path;
                };
                $scope.setCurrent = function(index, forceModel) {
                    $scope.current = index;
                    if (typeof $scope.items.suggest != 'undefined')
                        for (var i = 0; i < $scope.items.suggest.length; i++)
                            $scope.items.suggest[i].class = '';
                    if (index >= 0)
                        if ($scope.filteredItems.length > 0){
                            if (index > $scope.filteredItems.length - 1)
                                index = $scope.filteredItems.length - 1;
                            if (forceModel)
                                $scope.model = $scope.filteredItems[index].search;
                            $scope.filteredItems[index].class = 'active';
                            $scope.current = index;
                        }
                };
                $scope.onFocus = function(){
                    if (angular.isDefined($scope.model) && $scope.model.length > 2){
                        $scope.selected = true;
                    }
                    //console.log("onFocus()");
                };
                $scope.onBlur = function(event){
                    //console.log("onBlur()");
                    $scope.selected = false;
                    $document.unbind("click");
                };
                $scope.compare = function(query){
                    return function(item){
                        if (item.search.indexOf(query) == 0 &&
                            !angular.equals(item.search.toLowerCase(), query.toLowerCase()))
                            return true;
                        return false;
                    };
                };

                // This is dumb, but quick fix to get GA events on suggestion box.
                // TODO: Remove this and add in global GA directives
                $scope.gaSuggestion = function(linkTitle){
                    ga('send', 'event', 'oneSearch', 'suggestion_click', linkTitle);
                };
                $scope.gaTypeAhead = function(linkTitle){
                    ga('send', 'event', 'oneSearch', 'type_ahead_click', linkTitle);
                };
            },
            link: function(scope, elem, attrs) {
                scope.showSuggestions = false;
                var suggestWatcher = scope.$watch('items', function(newVal, oldVal){
                    var show = false;

                    for (var item in newVal){
                        if (item.length > 0){
                            show = true;
                            break;
                        }
                    }

                    scope.showSuggestions = (scope.model.length > 2 && show);
                }, true);

                elem.bind("keydown", function (event) {
                    switch(event.keyCode){
                        //ArrowUp
                        case 38:
                            if (scope.current > 0){
                                scope.setCurrent(scope.current - 1, true);
                                event.preventDefault();
                            } else {
                                scope.setCurrent(-1, false);
                                scope.model = scope.originalValue;
                                event.preventDefault();
                            }
                            break;

                        //ArrowDown
                        case 40:
                            if (scope.model.length > 2 && scope.current < scope.numShow - 1)
                                if (scope.current < scope.items.suggest.length - 1){
                                    scope.setCurrent(scope.current + 1, true);
                                    event.preventDefault();
                                }
                            break;

                        //Enter
                        case 13:
                            scope.selected = false;

                            // Check if type-ahead selected. If so, trigger GA event
                            // gaTypeAhead() is also bound to ng-click for each type-ahead link
                            if (scope.current > -1 && scope.filteredItems[scope.current] && scope.model === scope.filteredItems[scope.current].search){
                                scope.gaTypeAhead(scope.model);
                            }
                            break;

                        //Backspace
                        case 8:
                        //Delete
                        case 46:
                            scope.selected = true;
                            break;

                        default:
                            //console.log("KeyCode " + event.keyCode);
                            break;
                    }
                    scope.$apply();
                });

                // Unbind key event when scope is destroyed
                scope.$on('$destroy', function(){
                    elem.unbind("keydown");
                    suggestWatcher();
                    //console.log("$destroy");
                });

                elem.bind("click", function (event) {
                    if (event.target.id === "osTextField") {
                        scope.onFocus();
                        $document.bind("click", function(event) {
                            if (event.target.id === "osTextField") {
                                scope.onFocus();
                            } else
                            if (event.button < 1) {
                                scope.onBlur(event);
                            }
                            scope.$apply();
                        });
                    } else
                    if (event.button < 1) {
                        scope.onBlur(event);
                    }
                    scope.$apply();
                });

                scope.handleSelection = function(selectedItem) {
                    $timeout(function() {
                        scope.model = selectedItem;
                        scope.originalValue = "";
                        scope.items = {};
                        scope.setCurrent(-1, false);
                        scope.dataRequested = false;
                        scope.selected = false;
                        scope.faqSearched = false;
                        scope.$apply();
                        scope.search();
                    }, 0);
                };

            },
            templateUrl: 'common/directives/suggest/suggest.tpl.html'
        };
    }]);
